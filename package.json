{
  "name": "codeforge",
  "displayName": "CodeForge",
  "description": "Docker container management for development environments",
  "publisher": "TulipTreeTechnology",
  "version": "0.1.2",
  "icon": "media/icon.png",
  "engines": {
    "vscode": "^1.103.0"
  },
  "categories": [
    "Other",
    "Programming Languages",
    "Debuggers"
  ],
  "keywords": [
    "docker",
    "container",
    "development",
    "environment",
    "devcontainer"
  ],
  "homepage": "https://github.com/tuliptreetech/codeforge",
  "repository": {
    "type": "git",
    "url": "https://github.com/tuliptreetech/codeforge.git"
  },
  "bugs": {
    "url": "https://github.com/tuliptreetech/codeforge/issues"
  },
  "license": "MIT",
  "author": {
    "name": "Tulip Tree Technology"
  },
  "galleryBanner": {
    "color": "#1e1e1e",
    "theme": "dark"
  },
  "badges": [
    {
      "url": "https://img.shields.io/badge/Docker-Required-blue",
      "href": "https://www.docker.com/",
      "description": "Requires Docker"
    }
  ],
  "activationEvents": [
    "onCommand:codeforge.initializeProject",
    "onCommand:codeforge.launchTerminal",
    "onCommand:codeforge.registerTask",
    "onCommand:codeforge.runFuzzingTests",
    "onCommand:codeforge.buildFuzzingTests",
    "onCommand:codeforge.regenerateFuzzerList",
    "onView:codeforge.controlPanel",
    "workspaceContains:.codeforge/Dockerfile",
    "onTaskType:codeforge"
  ],
  "main": "./src/extension.js",
  "contributes": {
    "viewsContainers": {
      "activitybar": [
        {
          "id": "codeforge",
          "title": "CodeForge",
          "icon": "media/cf-hammer-vscode.svg",
          "when": "workspaceFolderCount > 0"
        }
      ]
    },
    "views": {
      "codeforge": [
        {
          "id": "codeforge.controlPanel",
          "name": "Control Panel",
          "type": "webview",
          "when": "workspaceFolderCount > 0"
        }
      ]
    },
    "commands": [
      {
        "command": "codeforge.initializeProject",
        "title": "CodeForge: Initialize Project"
      },
      {
        "command": "codeforge.launchTerminal",
        "title": "CodeForge: Launch Terminal in Container",
        "icon": "$(terminal)"
      },
      {
        "command": "codeforge.registerTask",
        "title": "CodeForge: Register Task"
      },
      {
        "command": "codeforge.runFuzzingTests",
        "title": "CodeForge: Run Fuzzing Tests"
      },
      {
        "command": "codeforge.buildFuzzingTests",
        "title": "CodeForge: Build Fuzzing Tests",
        "icon": "$(tools)"
      },
      {
        "command": "codeforge.regenerateFuzzerList",
        "title": "CodeForge: Regenerate Fuzzer List",
        "icon": "$(refresh)"
      }
    ],
    "menus": {},
    "taskDefinitions": [
      {
        "type": "codeforge",
        "required": [
          "command"
        ],
        "properties": {
          "command": {
            "type": "string",
            "description": "The command to run in the Docker container"
          },
          "label": {
            "type": "string",
            "description": "A label for the task"
          },
          "detail": {
            "type": "string",
            "description": "Additional details about the task"
          },
          "interactive": {
            "type": "boolean",
            "description": "Whether the task requires interactive input",
            "default": false
          },
          "ports": {
            "type": "array",
            "description": "Port mappings for the container (e.g., ['8080:8080', '3000:3000/tcp'])",
            "items": {
              "type": "string",
              "pattern": "^\\d+(:\\d+)?(/tcp|/udp)?$",
              "description": "Port mapping in format: hostPort:containerPort[/protocol]"
            }
          }
        }
      }
    ],
    "configuration": {
      "title": "CodeForge",
      "properties": {
        "codeforge.dockerCommand": {
          "type": "string",
          "default": "docker",
          "description": "The Docker command to use (e.g., 'docker', 'podman')"
        },
        "codeforge.defaultBaseImage": {
          "type": "string",
          "default": "ubuntu:24.04",
          "description": "Default base image for new Dockerfiles"
        },
        "codeforge.mountWorkspace": {
          "type": "boolean",
          "default": true,
          "description": "Automatically mount the workspace directory in containers"
        },
        "codeforge.workspaceMount": {
          "type": "string",
          "default": "/workspace",
          "description": "Mount point for the workspace directory inside containers"
        },
        "codeforge.removeContainersAfterRun": {
          "type": "boolean",
          "default": true,
          "description": "Automatically remove containers after they exit"
        },
        "codeforge.additionalDockerRunArgs": {
          "type": "array",
          "default": [],
          "description": "Additional arguments to pass to 'docker run' commands",
          "items": {
            "type": "string"
          }
        },
        "codeforge.defaultPortMappings": {
          "type": "array",
          "default": [],
          "description": "Default port mappings to apply to all containers (e.g., ['8080:8080', '3000:3000']). Task-specific ports will override these defaults.",
          "items": {
            "type": "string",
            "pattern": "^\\d+(:\\d+)?(/tcp|/udp)?$",
            "description": "Port mapping in format: hostPort:containerPort[/protocol]"
          }
        },
        "codeforge.showOutputChannel": {
          "type": "boolean",
          "default": true,
          "description": "Automatically show the output channel when running commands"
        },
        "codeforge.defaultShell": {
          "type": "string",
          "default": "/bin/bash",
          "description": "Default shell to use in containers"
        },
        "codeforge.terminateContainersOnDeactivate": {
          "type": "boolean",
          "default": true,
          "description": "Automatically terminate all tracked containers when the extension is deactivated"
        },
        "codeforge.fuzzing.libfuzzer.runs": {
          "type": "number",
          "default": 16,
          "minimum": 1,
          "maximum": 1000,
          "description": "Number of individual test runs per fuzzing job"
        },
        "codeforge.fuzzing.libfuzzer.jobs": {
          "type": "number",
          "default": 8,
          "minimum": 1,
          "maximum": 64,
          "description": "Number of parallel fuzzing jobs"
        },
        "codeforge.fuzzing.libfuzzer.maxTotalTime": {
          "type": "number",
          "default": 300,
          "minimum": 0,
          "description": "Maximum total fuzzing time in seconds (0 = unlimited)"
        },
        "codeforge.fuzzing.libfuzzer.maxLen": {
          "type": "number",
          "default": 4096,
          "minimum": 1,
          "maximum": 1048576,
          "description": "Maximum length of test inputs in bytes"
        },
        "codeforge.fuzzing.ignoreCrashes": {
          "type": "boolean",
          "default": true,
          "description": "Continue fuzzing after finding crashes"
        },
        "codeforge.fuzzing.exitOnCrash": {
          "type": "boolean",
          "default": false,
          "description": "Stop fuzzing immediately when first crash is found"
        },
        "codeforge.fuzzing.minimizeCrashes": {
          "type": "boolean",
          "default": true,
          "description": "Automatically minimize crash inputs to find the smallest reproducing case"
        },
        "codeforge.fuzzing.memoryLimit": {
          "type": "number",
          "default": 2048,
          "minimum": 128,
          "maximum": 16384,
          "description": "Memory limit per fuzzer process in MB"
        },
        "codeforge.fuzzing.timeoutPerRun": {
          "type": "number",
          "default": 25,
          "minimum": 1,
          "maximum": 300,
          "description": "Timeout for individual test runs in seconds"
        },
        "codeforge.fuzzing.outputDirectory": {
          "type": "string",
          "default": ".codeforge/fuzzing",
          "description": "Base directory for fuzzing outputs relative to workspace root"
        },
        "codeforge.fuzzing.preserveCorpus": {
          "type": "boolean",
          "default": true,
          "description": "Keep corpus files between fuzzing sessions for improved coverage"
        }
      }
    }
  },
  "scripts": {
    "test": "node ./test/runTest.js",
    "pretest": "npm run compile",
    "compile": "echo 'No compilation needed for JavaScript'",
    "verify": "npm run verify:all",
    "verify:all": "npm run verify:registration && npm run verify:tasks && npm run verify:extension && npm run verify:minimal",
    "verify:registration": "node ./test/utils/verify-registration.js",
    "verify:tasks": "node ./test/utils/verify-tasks.js",
    "verify:extension": "node ./test/utils/verify-extension-loading.js",
    "verify:minimal": "node ./test/utils/test-minimal-task.js",
    "test:full": "npm run verify && npm test",
    "package": "vsce package",
    "publish": "vsce publish",
    "vscode:prepublish": "echo 'Skipping tests in prepublish - tests run separately in CI'"
  },
  "devDependencies": {
    "@types/mocha": "^10.0.10",
    "@types/node": "^24.3.0",
    "@types/vscode": "^1.103.0",
    "@vscode/test-electron": "^2.5.2",
    "@vscode/vsce": "^3.6.0",
    "glob": "^11.0.3",
    "mocha": "^11.7.1",
    "prettier": "^3.6.2",
    "sinon": "^21.0.0"
  },
  "extensionPack": [],
  "extensionDependencies": []
}
